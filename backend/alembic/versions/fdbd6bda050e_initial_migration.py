"""Initial migration

Revision ID: fdbd6bda050e
Revises: 
Create Date: 2025-05-26 23:37:20.381684

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fdbd6bda050e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None



def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('measurement_blueprint', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('measurement_blueprint', 'is_custom')
    op.add_column('measurement_entry', sa.Column('blueprint_id', sa.Integer(), nullable=False))
    op.add_column('measurement_entry', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('measurement_entry', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_constraint(op.f('measurement_entry_type_id_fkey'), 'measurement_entry', type_='foreignkey')
    op.create_foreign_key(None, 'measurement_entry', 'measurement_blueprint', ['blueprint_id'], ['id'])
    op.drop_column('measurement_entry', 'type_id')
    op.add_column('user_allergy', sa.Column('allergy_id', sa.Integer(), nullable=False))
    op.add_column('user_allergy', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('user_allergy', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.create_foreign_key(None, 'user_allergy', 'allergies', ['allergy_id'], ['id'])
    op.drop_column('user_allergy', 'allergy_type')
    op.alter_column('user_details', 'birthdate',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.add_column('user_diet', sa.Column('diet_id', sa.Integer(), nullable=False))
    op.add_column('user_diet', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.create_foreign_key(None, 'user_diet', 'diets', ['diet_id'], ['id'])
    op.drop_column('user_diet', 'diet_type')
    op.add_column('user_goals', sa.Column('goal_id', sa.Integer(), nullable=False))
    op.drop_constraint(op.f('only_one_active_goal_per_user'), 'user_goals', type_='unique')
    op.create_unique_constraint(None, 'user_goals', ['user_id'])
    op.create_foreign_key(None, 'user_goals', 'goals', ['goal_id'], ['id'])
    op.drop_column('user_goals', 'goal_type')
    op.add_column('user_settings', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('user_settings', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    
   
 


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('user_settings', 'updated_at')
    op.drop_column('user_settings', 'created_at')
    op.add_column('user_goals', sa.Column('goal_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_goals', type_='foreignkey')
    op.drop_constraint(None, 'user_goals', type_='unique')
    op.create_unique_constraint(op.f('only_one_active_goal_per_user'), 'user_goals', ['user_id', 'is_active'])
    op.drop_column('user_goals', 'goal_id')
    op.add_column('user_diet', sa.Column('diet_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_diet', type_='foreignkey')
    op.drop_column('user_diet', 'updated_at')
    op.drop_column('user_diet', 'diet_id')
    op.alter_column('user_details', 'birthdate',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
    op.add_column('user_allergy', sa.Column('allergy_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_allergy', type_='foreignkey')
    op.drop_column('user_allergy', 'updated_at')
    op.drop_column('user_allergy', 'is_active')
    op.drop_column('user_allergy', 'allergy_id')
    op.add_column('measurement_entry', sa.Column('type_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'measurement_entry', type_='foreignkey')
    op.create_foreign_key(op.f('measurement_entry_type_id_fkey'), 'measurement_entry', 'measurement_blueprint', ['type_id'], ['id'])
    op.drop_column('measurement_entry', 'updated_at')
    op.drop_column('measurement_entry', 'created_at')
    op.drop_column('measurement_entry', 'blueprint_id')
    op.add_column('measurement_blueprint', sa.Column('is_custom', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.alter_column('measurement_blueprint', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    
   
    # ### end Alembic commands ###
